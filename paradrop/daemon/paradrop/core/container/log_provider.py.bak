'''
Provides messages from container logs (STDOUT and STDERR).
'''
import os
from twisted.internet import protocol, reactor

from paradrop.base import settings
from paradrop.base.output import out


class LogProvider(protocol.ProcessProtocol):
    def __init__(self, chute_name):
        self._chute_name = chute_name
        self._process = None
        self._log_observer = None

    def attach(self, log_observer):
        """
        Start listening for log messages.
        """
        if self._process is None:
            self.process = self._start_trace()
            self._log_observer = log_observer

    def detach(self):
        """
        Stop listening for log messages.
        """
        if self._process is not None:
            self._stop_trace()
            self._log_observer = None

    def outReceived(self, data):
        self._log_observer.on_new_message(data)

    def errReceived(self, data):
        self._log_observer.on_new_message(data)

    def outConnectionLost(self):
        pass

    def errConnectionLost(self):
        pass

    def processExited(self, reason):
        pass

    def processEnded(self, reason):
        self._process = None

    def _start_trace(self):
        env = {
            "PATH": os.environ.get("PATH", "/bin")
        }
        if settings.DOCKER_BIN_DIR not in env['PATH']:
            env['PATH'] += ":" + settings.DOCKER_BIN_DIR

        return reactor.spawnProcess(self, 'docker',
                                    ['docker', 'logs', '-f', '-t', self._chute_name],
                                    env)

    def _stop_trace(self):
        self.transport.signalProcess('KILL')
