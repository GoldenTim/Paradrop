import glob
import os
import subprocess

import appdirs
import click

from . import cloud
from . import node


@click.command('wizard')
@click.pass_context
def root(ctx):
    """
    Set up environment for development.
    """
    click.echo("This wizard will help set up your development environment "
               "for programming with Paradrop.\n")

    config_dir = appdirs.user_config_dir('pdtools', 'paradrop')
    env_path = os.path.join(config_dir, 'env.sh')
    env_text = "# This file was automatically generated by pdtools wizard.\n\n"

    new_account = False
    have_account = click.confirm("Do you have a developer account on paradrop.org")
    if not have_account:
        if click.confirm("Would you like to register one now"):
            click.echo("")

            # Keep trying until the registration succeeds.
            result = None
            while result is None:
                result = ctx.invoke(cloud.register)
                click.echo("")

            # Set flags - user has an account, and it is new.
            have_account = True
            new_account = True

    if have_account:
        click.echo("Let's log in to your developer account. This will give you "
                   "the ability to manage compute nodes remotely and publish "
                   "chutes to the store.\n")

        # Warning for new accounts - we need them to verify their email.
        if new_account:
            click.echo("Important: Since this is a new developer account, "
                       "please make sure "
                       "you have followed the instructions in the email to "
                       "activate your account before proceeding.\n")

        # Keep trying until login succeeds.
        result = False
        while not result:
            result = ctx.invoke(cloud.login)
            click.echo("")

        click.echo("Checking for nodes that are listed on your account...\n")
        ctx.invoke(cloud.list_nodes)
        click.echo("")

        while click.confirm("Would you like to use a claim token to add a node to your account"):
            token = click.prompt("Claim token").strip()
            ctx.invoke(cloud.claim_node, token=token)
            click.echo("")

    have_node = click.confirm("Do you have network access to a node that you "
                              "would like to use for development")
    ready = False
    while have_node and not ready:
        target = click.prompt("Node address").strip()
        click.echo("")

        click.echo("Let's log in to the node. This will give you direct "
                   "access to install and configure chutes on the node.\n")

        ctx.obj['target'] = target
        ready = ctx.invoke(node.login)
        click.echo("")

    if have_node:
        click.echo("Next, we'll look for SSH public keys in order to enable "
                   "SSH access to your node. You can always do this later "
                   "by running ssh-keygen and pdtools node import-ssh-key <path>.\n")

        search_path = os.path.expanduser("~/.ssh/*.pub")
        for path in glob.iglob(search_path):
            if click.confirm("Import {}".format(path)):
                ctx.invoke(node.import_ssh_key, path=path)

        env_text += "# Set default target for pdtools node commands.\n"
        env_text += "export PDTOOLS_NODE_TARGET={}\n\n".format(target)

    with open(env_path, "w") as output:
        output.write(env_text)

    click.echo("")
    click.echo("If you would like to enable tab completion for pdtools "
               "run the following command next.\n")
    click.echo("  _PDTOOLS_COMPLETE=source pdtools >> {}\n".format(env_path))

    click.echo("In any case, to finish setting up your development environment, "
               "you should run the following command.\n")
    click.echo("  source {}\n".format(env_path))
    click.echo("You can make these settings persistent by adding the command "
               "to your .bashrc or equivalent file.")
